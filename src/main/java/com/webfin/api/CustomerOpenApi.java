/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.8).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.webfin.api;

import com.webfin.model.Customer;
import com.webfin.pagination.ResponseDto;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseStatus;

import javax.validation.Valid;

import static org.springframework.http.HttpStatus.CREATED;
import static org.springframework.http.HttpStatus.OK;


@Api(tags = "Customers", description = "Customers's WebFin")
public interface CustomerOpenApi {
    @ApiOperation(value = "Entities customer from data base", nickname = "getCustomer",
            notes = "Show customers registered in data base",
            response = ResponseDto.class, tags = {"Customers"})

    @ApiResponses({ @ApiResponse(code = 200, message = "Customer search request successfully executed"),
            @ApiResponse(code = 204, message = "No customer found"),
            @ApiResponse(code = 404, message = "The request resource was not found") })
    @ApiImplicitParams({
            @ApiImplicitParam(name = "page", value = "Page number", dataType = "integer", paramType = "query", example = "1"),
            @ApiImplicitParam(name = "linesPerPage", value = "Number of elements per page", dataType = "integer", paramType = "query", example = "100"),
    })
    @ResponseStatus(OK)
    @GetMapping(value = "/api/v1/customers", produces = {"application/json"})
    ResponseDto<Customer> getCustomers(
            @RequestParam(value = "page", defaultValue = "1") final Integer page,
            @RequestParam(value = "linesPerPage", defaultValue = "100") final Integer linesPerPage
    );



    @ResponseStatus(CREATED)
    @ApiOperation(value = "Create Customer", nickname = "createCustomer", notes = "Create Customer.",
            response = Customer.class, tags = {"Customers",})
    @ApiResponse(code = 201, message = "The transaction will be processed",
            response = Customer.class)
    @PostMapping(value = "/api/v1/customers/create",
            produces = {"application/json"},
            consumes = {"application/json"})
    ResponseEntity<Customer> create(@ApiParam(value = "customer", required = true)  @RequestBody @Valid Customer customer);

}
